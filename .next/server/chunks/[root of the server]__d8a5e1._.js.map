{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://D%3A/shopify_new%20-%202-14-25/shopify_new/my-app/src/app/api/verify-shop/route.js"],"sourcesContent":["// src/app/api/verify-shop/route.js\r\nimport { MongoClient } from \"mongodb\";\r\nimport crypto from \"crypto\";\r\n\r\nconst MONGO_URI = process.env.MONGO_URI;\r\nconst SECRET_KEY = process.env.NEXT_PUBLIC_SHOPIFY_API_SECRET;\r\nlet client = null;\r\n\r\nasync function getClient() {\r\n  if (!client) {\r\n    client = new MongoClient(MONGO_URI);\r\n    await client.connect();\r\n  }\r\n  return client;\r\n}\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const { shop, hmac } = await req.json();\r\n\r\n    // Generate HMAC\r\n    const generatedHmac = crypto\r\n      .createHmac('sha256', SECRET_KEY)\r\n      .update(shop)\r\n      .digest('hex');\r\n    // Compare HMAC\r\n    if (generatedHmac !== hmac) {\r\n      console.error(\"HMAC mismatch in verify-shop:\", { generatedHmac, hmac });\r\n      return Response.json({ isValid: false });\r\n    }\r\n    // Ensure MongoDB client is connected\r\n    const client = await getClient();\r\n    const database = client.db(\"spotifydata\");\r\n    const sessions = database.collection(\"sessions\");\r\n    // Check if the shop exists in the database\r\n    const session = await sessions.findOne({ shop });\r\n    // If the shop exists, return isValid: true\r\n    if (session) {\r\n      return Response.json({ isValid: true });\r\n    } else {\r\n      // If the shop does not exist, return isValid: false\r\n      return Response.json({ isValid: false });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error verifying shop:\", error);\r\n    return Response.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n// // src/app/api/verify-shop/route.js\r\n// import { MongoClient } from \"mongodb\";\r\n// const MONGO_URI = process.env.MONGO_URI;\r\n// let client = null;\r\n// async function getClient() {\r\n//   if (!client) {\r\n//     client = new MongoClient(MONGO_URI);\r\n//     await client.connect();\r\n//   }\r\n//   return client;\r\n// }\r\n// export async function POST(req) {\r\n//   try {\r\n//     const { shop } = await req.json();\r\n//     // Ensure MongoDB client is connected\r\n//     const client = await getClient();\r\n//     const database = client.db(\"shopifyapp\");\r\n//     const sessions = database.collection(\"sessions\");\r\n//     // Check if the shop exists in the database\r\n//     const session = await sessions.findOne({ shop });\r\n//     // If the shop exists, return isValid: true\r\n//     if (session) {\r\n//       return Response.json({ isValid: true });\r\n//     } else {\r\n//       // If the shop does not exist, return isValid: false\r\n//       return Response.json({ isValid: false });\r\n//     }\r\n//   } catch (error) {\r\n//     console.error(\"Error verifying shop:\", error);\r\n//     return Response.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n//   }\r\n// }\r\n\r\n\r\n// import { MongoClient } from \"mongodb\";\r\n// const MONGO_URI = process.env.MONGO_URI;\r\n// const client = new MongoClient(MONGO_URI);\r\n// export async function POST(req) {\r\n//   try {\r\n//     const { shop } = await req.json();\r\n//     // Connect to MongoDB\r\n//     await client.connect();\r\n//     const database = client.db(\"shopifyapp\");\r\n//     const sessions = database.collection(\"sessions\");\r\n//     // Check if the shop exists in the database\r\n//     const session = await sessions.findOne({ shop });\r\n//     // If the shop exists, return isValid: true\r\n//     if (session) {\r\n//       return Response.json({ isValid: true });\r\n//     } else {\r\n//       // If the shop does not exist, return isValid: false\r\n//       return Response.json({ isValid: false });\r\n//     }\r\n//   } catch (error) {\r\n//     console.error(\"Error verifying shop:\", error);\r\n//     return Response.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n//   } finally {\r\n//     await client.close();\r\n//   }\r\n// }"],"names":[],"mappings":"AAAA,mCAAmC;;;;AACnC;AACA;;;AAEA,MAAM,YAAY,QAAQ,GAAG,CAAC,SAAS;AACvC,MAAM;AACN,IAAI,SAAS;AAEb,eAAe;IACb,IAAI,CAAC,QAAQ;QACX,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;QACzB,MAAM,OAAO,OAAO;IACtB;IACA,OAAO;AACT;AAEO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAErC,gBAAgB;QAChB,MAAM,gBAAgB,qGAAA,CAAA,UAAM,CACzB,UAAU,CAAC,UAAU,YACrB,MAAM,CAAC,MACP,MAAM,CAAC;QACV,eAAe;QACf,IAAI,kBAAkB,MAAM;YAC1B,QAAQ,KAAK,CAAC,iCAAiC;gBAAE;gBAAe;YAAK;YACrE,OAAO,SAAS,IAAI,CAAC;gBAAE,SAAS;YAAM;QACxC;QACA,qCAAqC;QACrC,MAAM,SAAS,MAAM;QACrB,MAAM,WAAW,OAAO,EAAE,CAAC;QAC3B,MAAM,WAAW,SAAS,UAAU,CAAC;QACrC,2CAA2C;QAC3C,MAAM,UAAU,MAAM,SAAS,OAAO,CAAC;YAAE;QAAK;QAC9C,2CAA2C;QAC3C,IAAI,SAAS;YACX,OAAO,SAAS,IAAI,CAAC;gBAAE,SAAS;YAAK;QACvC,OAAO;YACL,oDAAoD;YACpD,OAAO,SAAS,IAAI,CAAC;gBAAE,SAAS;YAAM;QACxC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IACzE;AACF,EAIA,sCAAsC;CACtC,yCAAyC;CACzC,2CAA2C;CAC3C,qBAAqB;CACrB,+BAA+B;CAC/B,mBAAmB;CACnB,2CAA2C;CAC3C,8BAA8B;CAC9B,MAAM;CACN,mBAAmB;CACnB,IAAI;CACJ,oCAAoC;CACpC,UAAU;CACV,yCAAyC;CACzC,4CAA4C;CAC5C,wCAAwC;CACxC,gDAAgD;CAChD,wDAAwD;CACxD,kDAAkD;CAClD,wDAAwD;CACxD,kDAAkD;CAClD,qBAAqB;CACrB,iDAAiD;CACjD,eAAe;CACf,6DAA6D;CAC7D,kDAAkD;CAClD,QAAQ;CACR,sBAAsB;CACtB,qDAAqD;CACrD,iFAAiF;CACjF,MAAM;CACN,IAAI;CAGJ,yCAAyC;CACzC,2CAA2C;CAC3C,6CAA6C;CAC7C,oCAAoC;CACpC,UAAU;CACV,yCAAyC;CACzC,4BAA4B;CAC5B,8BAA8B;CAC9B,gDAAgD;CAChD,wDAAwD;CACxD,kDAAkD;CAClD,wDAAwD;CACxD,kDAAkD;CAClD,qBAAqB;CACrB,iDAAiD;CACjD,eAAe;CACf,6DAA6D;CAC7D,kDAAkD;CAClD,QAAQ;CACR,sBAAsB;CACtB,qDAAqD;CACrD,iFAAiF;CACjF,gBAAgB;CAChB,4BAA4B;CAC5B,MAAM;CACN,IAAI"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}